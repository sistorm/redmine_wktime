<% 
    require 'json'
    taxComp =  @taxSettingVal['tax_settings'].blank? ? {} : JSON.parse(@taxSettingVal['tax_settings'])
    if action_type != "taxSettings"
        financialStartMonth = getFinancialStart
        start_year = Date.today.month < 4 ? (Date.today.year)-1 : Date.today.year
        startDate = ('01-' + financialStartMonth + '-' + start_year.to_s).to_date
        endDate = (startDate + 1.year) - 1.day
        user = WkUser.where("user_id = ?", userId).first
        unless user.join_date.blank?
            userDate = (user.join_date.to_date + 1.month).at_beginning_of_month
            if startDate < userDate
                startDate = userDate
            end
        end
    end
%>
<% if(action_type == "taxSettings") %>
    <h2><%= l(:label_income_tax_settings) %> (<%= l("#{@taxSettingVal['tax_rule']}") %>)</h2>
    <% content_for :sidebar do %>
	    <%= render partial: 'sidebar' %>
    <% end %>
    <% if request.post?
        taxSettings = WkSetting.where("name = 'tax_settings'" ).first
        taxSettings = WkSetting.new if taxSettings.blank?
        taxSettings.name = 'tax_settings'
        taxSettings.value = params[:taxsettings].to_json
        taxSettings.save()
        flash[:notice] = l(:notice_successful_update)
        controller.redirect_to action: 'income_tax', tab: "payroll", action_type: 'taxSettings'
       end %>
    <%= form_tag({controller: controller_name, action: 'income_tax', action_type: 'taxSettings'}, method: :post) do %>
        <fieldset>
            <table>
                <tr>
                    <td><%= "Annual Gross" %></td>
                    <td><%= select_tag 'taxsettings[annual_gross]', options_for_select(getSalaryCompNames.invert, taxComp["annual_gross"]) %></td>
                </tr>
                <tr>
                    <td><%= "PF" %></td>
                    <td><%= select_tag 'taxsettings[annual_pf]', options_for_select(getSalaryCompNames.invert, taxComp["annual_pf"]) %></td>
                </tr>
                <tr>
                    <td><%= "Professional Tax" %></td>
                    <td><%= select_tag 'taxsettings[annual_prof_tax]', options_for_select(getSalaryCompNames.invert, taxComp["annual_prof_tax"]) %></td>
                </tr>
                <tr>
                    <td><%= "Basic Salary" %></td>
                    <td><%= select_tag 'taxsettings[annual_basic]', options_for_select(getSalaryCompNames.invert, taxComp["annual_basic"]) %></td>
                </tr>
                <tr>
                    <td><%= "HRA" %></td>
                    <td><%= select_tag 'taxsettings[annual_hra]', options_for_select(getSalaryCompNames.invert, taxComp["annual_hra"]) %></td>
                </tr>
                <tr>
                    <td><%= "Childrenâ€™s Education Allowance" %></td>
                    <td><%= select_tag 'taxsettings[annual_edu_allowance]', options_for_select(getSalaryCompNames.invert, taxComp["annual_edu_allowance"]) %></td>
                </tr>
                <tr>
                    <td><%= "Standard Deduction" %></td>
                    <td><%= text_field_tag("taxsettings[annual_std_deduction]", taxComp["annual_std_deduction"], size: 20) %></td>
                </tr>
            </table>
        </fieldset>
        <div><%= submit_tag l(:button_save) %></div>
    <% end %>
<% elsif(action_type == "userSettings") %>
    <%= javascript_tag do %>
        function calculateTax(userId, compId){
            if(!validateUserSalComps()){
                var url = "/wkpayroll/income_tax?action_type="+ 'calculateTax' +"&user_id="+userId;
                $.ajax({
                    url: url,
                    type: 'post',
                    data: $('#query_form').serialize(),
                    cache: false,
                    success: function(data){
                        $('#is_override'+compId).prop('checked', true);
                        $('#factor'+compId).prop('disabled', false).val(data.monthTax);
                    },
                    beforeSend: function(){
                        $(this).parent().addClass('ajax-loading');
                    },
                    complete: function(){
                        $(this).parent().removeClass('ajax-loading');
                    }
                });
            }
        }

        function validateUserSalComps(){
            var isEdited = false;
            $(".userSalComps").each(function(){
                editedVal = $("#h_"+this.id).val();
                if(this.value == -1 && (editedVal == "" || editedVal == 0)) editedVal = -1;
                if(editedVal != this.value) isEdited = true;
            });
            if(isEdited) isEdited = !confirm("Are you sure want to apply tax without save?");
            return isEdited;
        }
    <% end %>
    <%  
        disabled = !validateERPPermission('A_TE_PRVLG')
        if(params[:method] == "saveTaxVal")
            incomeTax = WkIncomeTax.where("user_id = ? and name = 'income_tax'", userId).first
            incomeTax = WkIncomeTax.new if incomeTax.blank?
            incomeTax.user_id = userId
            incomeTax.name = 'income_tax'
            incomeTax.value = params[:taxsettings].permit!.to_json
            incomeTax.save()
            flash[:notice] = l(:notice_successful_update)
            controller.redirect_to :action => 'usrsettingsindex'
        end
        taxValue = {}
        prof_tax = 0
        financialPeriod = Array.new
		lastDate = startDate
		until lastDate > endDate
			financialPeriod << [lastDate, (lastDate + 1.months) -1.days]
			lastDate = lastDate + 1.months
        end
        totals = Hash.new
        financialPeriod.each do |start_date, end_date|
            salaries = WkSalary.joins("LEFT JOIN wk_salary_components SC ON wk_salaries.salary_component_id = SC.id")
                            .where("user_id = ? and salary_date between ? and ?", userId, start_date, end_date)
                            .select("wk_salaries.salary_component_id, wk_salaries.amount, SC.component_type")
            if salaries.present?
                compHash = salaries.map{|p| [p.salary_component_id.to_s, p.amount]}.to_h
                taxComp.each do |name, id|
                    totals[name] ||= 0
                    if name == "annual_gross"
                        salaries.each do |entry|
                            totals[name] += entry.amount if ["a", "b"].include?(entry.component_type)
                        end
                    else
                        totals[name] += compHash[id] if !["annual_prof_tax", "annual_std_deduction"].include?(name) && compHash[id].present?
                    end
                end
            else
                userSalaryHash = getUserSalaryHash(userId, start_date)
                taxComp.each do |name, id|
                    totals[name] ||= 0
                    totals[name] += userSalaryHash[userId.to_i][id.to_i].to_f if !["annual_prof_tax", "annual_std_deduction"].include?(name) &&
                     id.present? && userSalaryHash[userId.to_i][id.to_i].present?
                end
            end
        end
        profTaxID = taxComp["annual_prof_tax"]
        if profTaxID.present?
            salComp = WkSalaryComponents.where("id = ?", profTaxID).first
            freqDate = salComp.start_date
            case salComp.frequency
            when "sa"
                startMonth1 = (freqDate.to_date + 7.months).at_beginning_of_month
                profTaxDate1 = ('01-' + startMonth1.month.to_s + '-' + start_year.to_s).to_date
                profTaxDate2 = profTaxDate1 + 6.months
                taxValues = WkSalary.where("user_id = ? and salary_component_id = ? and (salary_date between ? and ? or salary_date between ? and ?)", userId, 
                                profTaxID, profTaxDate1, profTaxDate1.at_end_of_month, profTaxDate2, profTaxDate2.at_end_of_month)
                if taxValues.count == 2
                    taxValues.each do |tax_value|
                        prof_tax += tax_value.amount
                    end
                elsif taxValues.count == 1
                    prof_tax = taxValues.first.amount * 2
                else
                    prof_tax = 0
                end
            when "a"
                taxValues = WkSalary.where("user_id = ? and salary_component_id = ? and salary_date between ? and ?", userId, profTaxID, startDate, endDate)
                prof_tax = taxValues.first.amount
            when "m"
                financialPeriod.each do |start_date, end_date|
                    taxValues = WkSalary.where("user_id = ? and salary_component_id = ? and salary_date between ? and ?", userId, profTaxID,
                                 start_date, end_date)
                    if taxValues.present?
                        prof_tax += taxValues.first.amount
                    else
                        userSalaryHash = getUserSalaryHash(userId, start_date)
                        prof_tax += userSalaryHash[userId.to_i][profTaxID.to_i]
                    end
                end
            when "q"
                quaterStartDate = ('01-' + freqDate.to_date.month.to_s + '-' + start_year.to_s).to_date
                if quaterStartDate >= startDate && quaterStartDate <= endDate
                    while quaterStartDate < endDate
                        quaterEndDate = (quaterStartDate + 3.months) - 1.day
                        taxValues = WkSalary.where("user_id = ? and salary_component_id = ? and salary_date between ? and ?", userId, profTaxID,
                                    quaterStartDate, quaterEndDate)
                        if taxValues.present?
                            taxValues.each do |tax_value|
                                prof_tax += tax_value.amount
                            end
                        else
                            userSalaryHash = getUserSalaryHash(userId, quaterStartDate)
                            prof_tax += userSalaryHash[userId.to_i][profTaxID.to_i]
                        end
                        quaterStartDate = quaterStartDate + 3.months
                    end
                end
            end
        end
        taxEntries = WkIncomeTax.where("user_id = ?", userId).first
        if taxEntries.present?
            taxValue =  JSON.parse(taxEntries.value)
            rentVal = taxValue['rent'].to_f == 0.0 ? 0 : ((taxValue['rent'].to_f) - 0.1 * totals["annual_basic"].to_f)
            hraVal = [rentVal, totals["annual_basic"].to_f / 2, totals["annual_hra"].to_f].min
        end
    %>
    <% taxComp.each do |name, id| %>
        <%= hidden_field_tag(name, totals[name]) if name != "annual_prof_tax" && name != "annual_std_deduction"  %>
    <% end %>
    <% taxValue.each do |name, value| %>
        <%= hidden_field_tag('h_taxsettings_' + name, value) %>
    <% end %>
	<%= hidden_field_tag('annual_std_deduction', taxComp["annual_std_deduction"].to_f) %>
	<%= hidden_field_tag('annual_prof_tax', prof_tax) %>
    <div class="splitcontent">
        <div class="splitcontentleft">
            <div class="box tabular">
                <table>
                    <tr>
                        <td><%= "Annual Gross" %></td><td><%= totals["annual_gross"].blank? ? 0 : "%.2f" % totals["annual_gross"] %></td>
                    </tr>
                    <tr>
                        <td><%= "PF" %></td><td><%= totals["annual_pf"].blank? ? 0 : "%.2f" % totals["annual_pf"] %></td>
                    </tr>
                    <tr>
                        <td><%= "Professional Tax" %></td><td><%= "%.2f" % prof_tax %></td>
                    </tr>
                    <tr>
                        <td>
                            <%= "Childrenâ€™s Education Allowance" %></td><td><%= totals["annual_edu_allowance"].blank? ? 0 : 
                            "%.2f" % totals["annual_edu_allowance"] %> <%= "(Max. Rs 1200)" %> 
                        </td>
                    </tr>
                    <tr>
                        <td><%= "Standard Deduction" %></td><td><%= taxComp["annual_std_deduction"].blank? ? 0 : taxComp["annual_std_deduction"] %></td>
                    </tr>
                    <tr>
                        <td><%= "Additional Income" %></td>
                        <td><%= text_field_tag("taxsettings[addl_income]", taxValue['addl_income'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td><%= "Interest on Home Loan" %></td>
                        <td><%= text_field_tag("taxsettings[home_loan]", taxValue['home_loan'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td><%= "Leave Travel Allowance" %></td>
                        <td><%= text_field_tag("taxsettings[travel_allowance]", taxValue['travel_allowance'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td><%= "Life Insurance" %></td>
                        <td><%= text_field_tag("taxsettings[insurance]", taxValue['insurance'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td><%= "Tuition fees for children" %></td>
                        <td><%= text_field_tag("taxsettings[tuition_fee]", taxValue['tuition_fee'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td><%= "Medical Insurance Premium" %></td>
                        <td><%= text_field_tag("taxsettings[medical_insurance]", taxValue['medical_insurance'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td><%= "Interest on Education Loan" %></td>
                        <td><%= text_field_tag("taxsettings[edu_loan]", taxValue['edu_loan'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="splitcontentright">
            <div class="box tabular">
                <table>
                    <tr><td><b><%= "HRA" %></b></td></tr>
                    <tr>
                        <td></td>
                        <td><%= "Basic Salary" %></td>
                        <td><%= totals["annual_basic"].blank? ? 0 : "%.2f" % totals["annual_basic"] %></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><%= "HRA received" %></td>
                        <td><%= totals["annual_hra"].blank? ? 0 : "%.2f" % totals["annual_hra"] %></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><%= "Actual Rent" %></td>
                        <td><%= text_field_tag("taxsettings[rent]", taxValue['rent'], size: 20, disabled: disabled, class: "userSalComps") %></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><%= "Final HRA" %></td>
                        <td><%=  "%.2f" % hraVal unless hraVal.blank? %></td>
                    </tr>
                </table>
            </div>
        </div>
    <div style="clear:both;"></div>
<%
# For Apply Tax 
else
    monthCount =((12 * (endDate.year - startDate.year) + endDate.month - startDate.month).abs) + 1 if startDate && endDate
    section80CAmt = params['taxsettings']['insurance'].to_f + params['taxsettings']['tuition_fee'].to_f + params[:annual_pf].to_f
    section80CAmt = section80CAmt > 150000 ? 150000 : section80CAmt
    deductionAmt = params[:annual_std_deduction].to_f + params['taxsettings']['home_loan'].to_f + params['taxsettings']['travel_allowance'].to_f +
                        params['taxsettings']['medical_insurance'].to_f + params['taxsettings']['edu_loan'].to_f + params[:annual_prof_tax].to_f +
                        (params[:annual_edu_allowance].to_f > 1200 ? 1200 : params[:annual_edu_allowance].to_f)
    basic = params[:annual_basic].to_f
    rentVal = params['taxsettings']['rent'].to_f == 0.0 ? 0 : (params['taxsettings']['rent'].to_f - 0.1 * basic)
    hraVal = [rentVal, basic / 2, params[:annual_hra].to_f].min
    taxIncome = params[:annual_gross].to_f + params['taxsettings']['addl_income'].to_f - deductionAmt - section80CAmt - hraVal

    taxIncome -= 500000
    taxVal = 0
    if taxIncome > 0
        if taxIncome > 500000
            taxIncome -= 500000
            taxVal = 112500 + (0.3 * taxIncome)
        else
            taxVal = 12500 + (0.2 * taxIncome)
        end
        taxVal += (0.04 * taxVal)
    end 
    
    tdsID = @taxSettingVal['income_tax'].to_i
    tdsValue = WkSalary.where("user_id = ? and salary_component_id = ? and salary_date between ? and ? ", userId, tdsID, startDate, endDate )
    if tdsValue.present?
        tdsAmt = tdsValue.sum(:amount)
        taxVal = (taxVal >= tdsAmt) ? taxVal- tdsAmt : 0
        monthCount -= tdsValue.count
    end
    monthTax = taxVal / monthCount
    monthTax = monthTax.blank? ? 0 : "%.2f" % monthTax
    data = {monthTax: monthTax}
    controller.redirect_to action: "income_tax", data: data, action_type: "calculatetax"
 end
 %>